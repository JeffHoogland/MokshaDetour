#define ALTERNATE 1

group { name: "elm/ews/background/default";

   parts { 

		part {
			name: "background";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 255;
			}
		}
		part {
			name: "gradient";
			type: IMAGE;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				rel1.offset: 1 1;
				rel2.offset: -2 -2;
				image {
					normal: "images/backdrop_grad.png";
				} 
				fill {
					smooth: 0;
					size {
						relative: 0.0 1.0;
						offset: 128 0;
					}
				}
			}
		}

			part {
			name: "pattern";
			type: IMAGE;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 205 204 188 15;

				image {
					#if ALTERNATE == 0
						normal: "images/wallpaper_pat2.png";
					#else
					#if ALTERNATE == 1
						normal: "images/wallpaper_pat4.png";
					#endif
					#endif
				}
				fill {
					size {
						relative: 0 0;
						#if ALTERNATE == 0
							offset: 240 240;
						#else
						#if ALTERNATE == 1
							offset: 200 200;
						#endif
						#endif
					}
				}
			}
		}
	}
}

#define BORDER_SHADOW()											\
      part { name: "shadow"; mouse_events: 0;								\
         description { state: "default" 0.0;								\
            image.normal: "images/comp/comp-sh1.png";						\
            image.border: 35 35 35 35;										\
            image.middle: 0;												\
            rel1.to: "frame";												\
            rel1.offset: -35  -35;											\
            rel2.to: "frame";												\
            rel2.offset: 34 34;												\
            fill.smooth: 1;													\
            color: 0 0 0 255;												\
         }																	\
         description { state: "hidden" 0.0;									\
			inherit: "default" 0.0;											\
			color: 0 0 0 0;													\
			visible: 0;														\
         }																	\
      }																		\

#define BORDER_GLOW()											\
      part { name: "glow"; mouse_events: 0;									\
         description { state: "default" 0.0;								\
            image.normal: "images/win_glow.png";							\
            image.border: 9 9 9 9;											\
            image.middle: 0;												\
            rel1.to: "frame";												\
            rel1.offset: -5  -5;											\
            rel2.to: "frame";												\
            rel2.offset: 4 4;												\
            fill.smooth: 0;													\
            color: 255 255 255 0;											\
            visible: 0;														\
         }																	\
         description { state: "focused" 0.0;								\
			inherit: "default" 0.0;											\
			color: 255 255 255 255;											\
			visible: 1;														\
         }																	\
      }																		\

#if (COLORS == 0)
#define COLORIZE
#define COLORIZE_ACTIVE
#define COLORIZE_BUTTONS		color_class: "border_buttons_post";
#define COLORIZE_ACTIVE_BUTTONS color_class: "border_buttons_post_active";
#else
#define COLORIZE        color_class: "border_frame";
#define COLORIZE_ACTIVE color_class: "border_frame_active";
#define COLORIZE_BUTTONS		color_class: "border_frame";
#define COLORIZE_ACTIVE_BUTTONS color_class: "border_frame_active";
#endif


#define BORDER_IMAGE(IMG, _BORDER, SIZE)			\
	part {											\
		name: "border";								\
		description {								\
			state: "default" 0.0;					\
			min: SIZE;								\
			rel1.to: "frame";						\
			rel2.to: "frame";						\
			image {									\
				normal: IMG;						\
				border: _BORDER;					\
				middle: 0;							\
			}										\
			COLORIZE;								\
		}											\
		description {								\
			state: "focused" 0.0;					\
			inherit: "default" 0.0;					\
			COLORIZE_ACTIVE;						\
		}											\
	}												\

#define BORDER_COLOR(IMG, _BORDER, SIZE)		\
	part {										\
		name: "border_color";					\
		description {							\
			state: "default" 0.0;				\
			min: SIZE;							\
			rel1.to: "frame";					\
			rel2.to: "frame";					\
			image {								\
				normal: IMG;					\
				border: _BORDER;				\
				middle: 0;						\
			}									\
			color_class: "border_frame";		\
		}										\
		description {							\
			state: "focused" 0.0;				\
			inherit: "default" 0.0;				\
			color_class: "border_frame_active";	\
		}										\
	}											\
	
#define BORDER_COLOR_POST(IMG, _BORDER, SIZE)	\
	part {										\
		name: "border_color_post";				\
		description {							\
			state: "default" 0.0;				\
			min: SIZE;							\
			rel1.to: "frame";					\
			rel2.to: "frame";					\
			image {								\
				normal: IMG;					\
				border: _BORDER;				\
				middle: 0;						\
			}									\
			color_class: "border_frame_post";	\
		}										\
		description {							\
			state: "focused" 0.0;				\
			inherit: "default" 0.0;				\
			color_class: "border_frame_active_post";	\
		}										\
	}											\

#define BORDER_BUT(NAME, SIZE, REL1, OFF1, REL2, OFF2, IMG)			\
	part {																\
		name: NAME"_bg";												\
		type: IMAGE;													\
		mouse_events: 0;												\
		description {													\
			state: "default" 0.0;										\
			rel1.to: NAME;												\
			rel2.to: NAME;												\
			image {														\
				normal: "images/window-border_bt0.png";					\
			}															\
			COLORIZE_BUTTONS;											\
		}																\
		description {													\
			state: "focused" 0.0;										\
			inherit: "default" 0.0;										\
			COLORIZE_ACTIVE_BUTTONS;									\
		}																\
	}																	\
	part {																\
		name: NAME;														\
		type: IMAGE;													\
		mouse_events: 1;												\
		description {													\
			state: "default" 0.0;										\
			min: SIZE;													\
			max: SIZE;													\
			rel1 {														\
				to: "frame";											\
				relative: REL1;											\
				offset: OFF1;											\
			}															\
			rel2 {														\
				to: "frame";											\
				relative: REL2;											\
				offset: OFF2;											\
			}															\
			image {														\
				normal: IMG;											\
			}															\
			color: 240 240 240 255;										\
		}																\
		description {													\
			state: "focused" 0.0;										\
			inherit: "default" 0.0;										\
			color: 255 255 255 255;										\
		}																\
		description {													\
			state: "clicked" 0.0;										\
			inherit: "default" 0.0;										\
			color: 205 205 205 255;										\
		}																\
	}																	\

#define BORDER_BUTTONS(NAME, EVENT, SIZE, REL1, OFF1, REL2, OFF2, IMG)	\
	BORDER_BUT(NAME, SIZE, REL1, OFF1, REL2, OFF2, IMG);				\
	part {																\
		name: EVENT;													\
		type: RECT;														\
		repeat_events: 1;												\
		description {													\
			state: "default" 0.0;										\
			color: 0 0 0 0;												\
			rel1.to: NAME;												\
			rel2.to: NAME;												\
		}																\
	}																	\

#define BORDER_BUTTONS_MAX(NAME, EVENT, SIZE, REL1, OFF1, REL2, OFF2, IMG)	\
	BORDER_BUT(NAME, SIZE, REL1, OFF1, REL2, OFF2, IMG);				\
	part {																\
		name: EVENT"_1";												\
		type: RECT;														\
		repeat_events: 1;												\
		description {													\
			state: "default" 0.0;										\
			color: 0 0 0 0;												\
			rel1.to: NAME;												\
			rel2.to: NAME;												\
			visible: 1;													\
		}																\
		description { state: "max" 0.0;									\
            inherit: "default" 0.0;										\
            visible: 0;													\
        }																\
	}																	\
	part {																\
		name: EVENT"_2";												\
		type: RECT;														\
		repeat_events: 1;												\
		description {													\
			state: "default" 0.0;										\
			color: 0 0 0 0;												\
			rel1.to: NAME;												\
			rel2.to: NAME;												\
			visible: 0;													\
		}																\
		description { state: "max" 0.0;									\
            inherit: "default" 0.0;										\
            visible: 1;													\
        }																\
	}																	\


#define BORDER_TITLE(HEIGHT, TO_LEFT, TO_RIGHT)			\
	part {												\
		name: "title.area.clip";						\
		type: RECT;										\
		mouse_events: 0;								\
		description {									\
			state: "default" 0.0;						\
			min: 1 HEIGHT;								\
			visible: 0;									\
			rel1 {										\
				relative: 1.0 0.0;						\
				to_x: TO_LEFT;							\
				to_y: "frame";							\
				offset: 6 0;							\
			}											\
			rel2 {										\
				to_x: TO_RIGHT;							\
				to_y: "frame";							\
				relative: 0.0 0.0;						\
				offset: -1 HEIGHT;						\
			}											\
		}												\
	}													\
	part {												\
		name: "elm.text.title";							\
		type: TEXT;										\
		effect: SHADOW;									\
		scale: 1;										\
		mouse_events: 0;								\
		description {									\
			state: "default" 0.0;						\
			rel1.to: "title.area.clip";					\
			rel2.to: "title.area.clip";					\
			rel1.offset: 0 5;							\
			rel2.offset: -1 -3;							\
			color3: 255 255 255 255;					\
			color_class: "border_title";				\
			TEXT_TITLE("title_bar", 0.5 0.5, 0 1);		\
		}												\
		description {									\
			state: "focused" 0.0;						\
			inherit: "default" 0.0;						\
			color3: 255 255 255 255;					\
			color_class: "border_title_active";			\
		}												\
	}

#define BORDER_ICON(NAME, EVENT, TO)					\
	part {												\
		name: NAME;										\
		type: SWALLOW;									\
														\
		description {									\
			state: "default" 0.0;						\
			aspect: 1.0 1.0;							\
			align: 0.0 0.0;								\
			aspect_preference: BOTH;					\
			rel1 {										\
				to: TO;									\
				offset: 6 3;							\
			}											\
			rel2 {										\
				to: TO;									\
				offset: 0 -4;							\
			}											\
		}												\
		description {									\
			state: "urgent" 0.0;						\
			inherit: "default" 0.0;						\
			color: 255 200 200 255;						\
		}												\
	}													\
	part {												\
		name: EVENT;									\
		type: RECT;										\
		mouse_events: 1;								\
														\
		description {									\
			state: "default" 0.0;						\
			color: 0 0 0 0;								\
			rel1 {										\
				to: NAME;								\
			}											\
														\
			rel2 {										\
				to: NAME;								\
			}											\
		}												\
	}

#define BORDER_EVENT_MAP(NAME, REL1, OFF1, REL2, OFF2)	\
	part {												\
		name: NAME;										\
		type: RECT;										\
		mouse_events: 1;								\
		description {									\
			state: "default" 0.0;						\
			color: 0 0 0 0;								\
			rel1 {										\
				to: "frame";							\
				relative: REL1;							\
				offset: OFF1;							\
			}											\
														\
			rel2 {										\
				to: "frame";							\
				relative: REL2;							\
				offset: OFF2;							\
			}											\
		}												\
	}													\
	
#define BORDER_EVENT_MAP_RESIZE(LEFT, RIGHT, TOP, BOTTOM, OFFSET)		\
	BORDER_EVENT_MAP("e.event.resize.t",  0.0 0.0, 5     0,       1.0 0.0, -6     2);	\
	BORDER_EVENT_MAP("e.event.resize.l",  0.0 0.0, 0     5,       0.0 1.0, LEFT  -6);	\
	BORDER_EVENT_MAP("e.event.resize.r",  1.0 0.0, RIGHT 0,       1.0 1.0, -1    -6);	\
	BORDER_EVENT_MAP("e.event.resize.tl", 0.0 0.0, 0     0,       0.0 0.0,  5     5);	\
	BORDER_EVENT_MAP("e.event.resize.tr", 1.0 0.0, -6    0,       1.0 0.0, -1     5);	\
	BORDER_EVENT_MAP("e.event.resize.bl", 0.0 1.0, 0    -6,       0.0 1.0,  5    -1);	\
	BORDER_EVENT_MAP("e.event.resize.br", 1.0 1.0, -6   -6,       1.0 1.0, -1    -1);	\
	BORDER_EVENT_MAP("e.event.resize.b",  0.0 1.0, 5     BOTTOM,  1.0 1.0, -6    -1);	\
	
#define BORDER_CLIENT(LEFT, RIGHT, TOP, BOTTOM)								\
	part { name: "client_clip"; type: RECT; mouse_events: 0;				\
         description { state: "default" 0.0;								\
            rel1.to: "elm.swallow.client";									\
            rel2.to: "elm.swallow.client";									\
         }																	\
         description { state: "hidden" 0.0;									\
			inherit: "default" 0.0;											\
			visible: 0;														\
		}																	\
	}																		\
	part {																	\
		name: "elm.swallow.client";											\
		clip_to: "client_clip";												\
		type: SWALLOW;														\
		description {														\
			state: "default" 0.0;											\
			rel1.relative: 0.0 0.0;											\
            rel1.to: "border";												\
            rel1.offset: LEFT TOP;											\
            rel2.relative: 1.0 1.0;											\
            rel2.to: "border";												\
            rel2.offset: RIGHT BOTTOM;										\
		}																	\
		description { state: "shaded" 0.0;									\
			inherit: "default" 0.0;											\
			visible: 0;														\
		}																	\
	}																		\

#define BORDER_BUSY()														\
		part { name: "busy_clip"; type: RECT;								\
			description { state: "default" 0.0;								\
				color: 255 255 255 0;										\
				visible: 0;													\
			}																\
			description { state: "hung" 0.0;								\
				inherit: "default" 0.0;										\
				color: 255 255 255 255;										\
				visible: 1;													\
			}																\
		}																	\
		part { name: "busy_shadow"; mouse_events: 0;						\
         clip_to: "busy_clip";												\
			description { state: "default" 0.0;								\
				fixed: 1 1;													\
				image.normal: "images/cursor_shadow.png";					\
				aspect: 1.0 1.0; aspect_preference: VERTICAL;				\
				max: 20 20;													\
				rel1.relative: 1.0 0.0;										\
				rel1.offset: 2 -0;											\
				rel1.to: "elm.event.icon";									\
				rel2.relative: 1.0 1.0;										\
				rel2.offset: 2 -1;											\
				rel2.to: "elm.event.icon";									\
				align: 0.0 0.5;												\
				fixed: 1 1;													\
			}																\
		}																	\
		part { name: "busy_spinner"; mouse_events: 0;						\
			clip_to: "busy_clip";											\
			description { state: "default" 0.0;								\
				fixed: 1 1;													\
				rel1.to: "busy_shadow";										\
				rel2.to: "busy_shadow";										\
				image.normal: "images/cursor_main.png";						\
				map.on: 1;													\
				map.smooth: 1;												\
				map.rotation.center: "busy_shadow";							\
			}																\
			description { state: "spin" 0.0;								\
				inherit: "default" 0.0;										\
				map.rotation.z: 360;										\
			}																\
		}																	\
		part { name: "busy_up"; mouse_events: 0;							\
			clip_to: "busy_clip";											\
			description { state: "default" 0.0;								\
				fixed: 1 1;													\
				image.normal: "images/cursor_up.png";						\
				rel1.to: "busy_shadow";										\
				rel2.to: "busy_shadow";										\
			}																\
		}																	\

#define TOP 23
#define LEFT 1
#define RIGHT -2
#define BOTTOM -3
group { name: "elm/ews/decoration/default";
	parts {
		part { name: "frame"; type: RECT;
			description {
			state: "default" 0.0;
			visible: 0;
			}
		} 
		BORDER_SHADOW();
		BORDER_GLOW();
		BORDER_COLOR("images/window-border-color.png", 6 6 23 2, 25 25);
		BORDER_IMAGE("images/window-border.png", 6 6 23 2, 25 25);
		BORDER_COLOR_POST("images/window-border-color.png", 6 6 23 2, 25 25);
		BORDER_TITLE(TOP, "elm.swallow.icon", "button-min");
		BORDER_ICON("elm.swallow.icon", "elm.event.icon", "e.event.titlebar");
		BORDER_BUTTONS("button-close", "e.event.close",
					   20 18, 1.0 0.0, -8 1, 1.0 0.0, -28 TOP,
					   "images/window-border_bt2.png");
		BORDER_BUTTONS_MAX("button-max",   "e.event.maximize",
					   20 18, 1.0 0.0, -29 1, 1.0 0.0, -49 TOP,
					   "images/window-border_bt2.png");
		BORDER_BUTTONS("button-min",   "e.event.minimize",
					   20 18, 1.0 0.0, -50 1, 1.0 0.0, -70 TOP,
					   "images/window-border_bt2.png");
		program {
			signal: "mouse,clicked,1"; source: "elm.event.icon";
			action: SIGNAL_EMIT "elm,action,menu" "elm";
		}
		BORDER_EVENT_MAP("e.event.titlebar",  0.0 0.0, 0 0, 1.0 0.0, -1 TOP);
		program {
			signal: "mouse,down,1"; source: "e.event.titlebar";
			action: SIGNAL_EMIT "elm,action,move,start" "elm";
		}
		program {
			signal: "mouse,up,1"; source: "e.event.titlebar";
			action: SIGNAL_EMIT "elm,action,move,stop" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.close";
			action: SIGNAL_EMIT "elm,action,close" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.maximize_1";
			action: SIGNAL_EMIT "elm,action,maximize" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.maximize_2";
			action: SIGNAL_EMIT "elm,action,restore" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.minimize";
			action: SIGNAL_EMIT "elm,action,iconify" "elm";
		}
		part { name: "focus"; type: RECT; repeat_events: 1;
			description { state: "default" 0.0;
				rel1.to: "border";
				rel2.to: "border";
				color: 0 0 0 0;
				}
			description { state: "focused" 0.0;
				inherit: "default" 0.0;
				visible: 0;
				}
		}
		program {
			signal: "mouse,down,1"; source: "focus";
			action: SIGNAL_EMIT "elm,action,focus" "elm";
		}
		program {
			signal: "elm,state,focus,on"; source: "elm";
			action: STATE_SET "focused" 0.0;
			transition: SINUSOIDAL 0.1;
			target: "glow";
			target: "focus";
			after: "focus2";
		}
		program { name: "focus2";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 0.4;
			target: "glow";
		}
		program {
			signal: "elm,state,focus,off"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.2;
			target: "focus";
			target: "glow";
			target: "elm.text.title";
			target: "border";
			target: "border_color";
			target: "border_color_post";
			target: "button-close_bg";
			target: "button-max_bg";
			target: "button-min_bg";
			target: "button-close";
			target: "button-max";
			target: "button-min";
		}
		program {
			signal: "elm,state,focus,on"; source: "elm";
			action: STATE_SET "focused" 0.0;
			transition: ACCELERATE 0.2;
			target: "elm.text.title";
			target: "border";
			target: "border_color";
			target: "border_color_post";
			target: "button-close_bg";
			target: "button-max_bg";
			target: "button-min_bg";
			target: "button-close";
			target: "button-max";
			target: "button-min";
		}
		BORDER_EVENT_MAP_RESIZE(LEFT, RIGHT, TOP, BOTTOM, 5);
		program {
			signal: "elm,state,maximized,on"; source: "elm";
			action: STATE_SET "max" 0.0;
			target: "e.event.maximize_1";
			target: "e.event.maximize_2";
			//~ target: "e.event.resize.bl";
			//~ target: "e.event.resize.b";
			//~ target: "e.event.resize.br";
		}
		program {
			signal: "elm,state,maximized,off"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "e.event.maximize_1";
			target: "e.event.maximize_2";
			target: "e.event.resize.bl";
			target: "e.event.resize.b";
			target: "e.event.resize.br";
		}
		program {
			signal: "mouse,down,*"; source: "e.event.close";
			action: STATE_SET "clicked" 0.0;
			target: "button-close";
		}
		program {
			signal: "mouse,up,*"; source: "e.event.close";
			action: STATE_SET "default" 0.0;
			target: "button-close";
		}
		program {
			signal: "mouse,down,*"; source: "e.event.maximize*";
			action: STATE_SET "clicked" 0.0;
			target: "button-max";
		}
		program {
			signal: "mouse,up,*"; source: "e.event.maximize*";
			action: STATE_SET "default" 0.0;
			target: "button-max";
		}
		program {
			signal: "mouse,down,*"; source: "e.event.minimize";
			action: STATE_SET "clicked" 0.0;
			target: "button-min";
		}
		program {
			signal: "mouse,up,*"; source: "e.event.minimize";
			action: STATE_SET "default" 0.0;
			target: "button-min";
		}
	}
}

// attention!!!: this is not work properly!!!
group { name: "elm/border/base/default";
	parts {
		part { name: "focus_clip"; type: RECT;
			description { state: "default" 0.0;
			}
			description { state: "max" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
		part { name: "elm.swallow.frame_spacer"; type: SWALLOW;
			clip_to: "focus_clip";
			description { state: "default" 0.0;
				rel1.to: "frame";
				rel2.to: "frame";
			}
		}
		part { name: "frame"; type: SPACER;
			description { state: "default" 0.0;
				rel1.offset: 36 36;
				rel2.offset: -35 -35;
			}
			description { state: "max" 0.0;
				inherit: "default" 0.0;
				rel1.offset: 0 0;
				rel2.offset: -1 -1;
			}
		}
		BORDER_SHADOW();
		BORDER_GLOW();
		BORDER_CLIENT(LEFT, RIGHT, TOP, BOTTOM);
		BORDER_COLOR("images/window-border-color.png", 6 6 23 2, 25 25);
		BORDER_IMAGE("images/window-border.png", 6 6 23 2, 25 25);
		BORDER_COLOR_POST("images/window-border-color.png", 6 6 23 2, 25 25);
		BORDER_TITLE(TOP, "elm.swallow.icon", "button-min");
		BORDER_ICON("elm.swallow.icon", "elm.event.icon", "e.event.titlebar");
		BORDER_BUSY();

		BORDER_BUTTONS("button-close", "e.event.close",
					   20 18, 1.0 0.0, -8 1, 1.0 0.0, -28 TOP,
					   "images/window-border_bt2.png");
		BORDER_BUTTONS("button-max",   "e.event.maximize",
					   20 18, 1.0 0.0, -29 1, 1.0 0.0, -49 TOP,
					   "images/window-border_bt2.png");
		BORDER_BUTTONS("button-min",   "e.event.minimize",
					   20 18, 1.0 0.0, -50 1, 1.0 0.0, -70 TOP,
					   "images/window-border_bt2.png");
		BORDER_EVENT_MAP("e.event.titlebar",  0.0 0.0, 0 0, 1.0 0.0, -1 TOP);
		BORDER_EVENT_MAP_RESIZE(LEFT, RIGHT, TOP, BOTTOM, 5);
		
	}
	programs {
	   program {
			signal: "elm,action,focus"; source: "elm";
			action: STATE_SET "focused" 0.0;
			transition: SINUSOIDAL 0.1;
			target: "glow";
			after: "focus2";
		}
		program { name: "focus2";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 0.4;
			target: "glow";
		}
		program {
			signal: "elm,action,unfocus"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 0.1;
			target: "glow";
		}
		program {
			signal: "elm,action,focus"; source: "elm";
			action: STATE_SET "focused" 0.0;
			transition: ACCELERATE 0.2;
			target: "elm.text.title";
			target: "border";
			target: "border_color";
			target: "border_color_post";
			target: "button-close_bg";
			target: "button-max_bg";
			target: "button-min_bg";
			target: "button-close";
			target: "button-max";
			target: "button-min";
		}
		program {
			signal: "elm,action,unfocus"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.2;
			target: "elm.text.title";
			target: "border";
			target: "border_color";
			target: "border_color_post";
			target: "button-close_bg";
			target: "button-max_bg";
			target: "button-min_bg";
			target: "button-close";
			target: "button-max";
			target: "button-min";
		}
		program { name: "urg1";
			signal: "elm,state,urgent"; source: "elm";
			action: STATE_SET "urgent" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.icon";
			after: "urg2";	
		}
		program { name: "urg2";
			signal: "elm,state,not_urgent"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.icon";
			after: "urg1";
		}
		program { name: "spin";
			signal: "elm,state,hung"; source: "elm";
			action: STATE_SET "spin" 0.0;
			transition: LINEAR 1.0;
			target: "busy_spinner";
			after: "spin2";
		}
		program { name: "spin2";
			action: STATE_SET "default" 0.0;
			target: "busy_spinner";
			after: "spin";
		}
		program {
			signal: "elm,state,hung"; source: "elm";
			action: STATE_SET "hung" 0.0;
			transition: SINUSOIDAL 0.25;
			target: "busy_clip";
		}
		program {
			signal: "elm,state,unhung"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 1.0;
			target: "busy_clip";
			after: "spin3";
		}
		program { name: "spin3";
			action: ACTION_STOP;
			target: "spin";
			target: "spin2";
			after: "spin4";
		}
		program { name: "spin4";
			action: STATE_SET "default" 0.0;
			target: "busy_spinner";
		}
		program {
			signal: "elm,state,shaded"; source: "elm";
			action: STATE_SET "shaded" 0.0;
			target: "elm.swallow.client";
		}
		program {
			signal: "elm,state,unshading"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.client";
		}
		program {
			signal: "mouse,down,*"; source: "e.event.close";
			action: STATE_SET "clicked" 0.0;
			target: "button-close";
		}
		program {
			signal: "mouse,up,*"; source: "e.event.close";
			action: STATE_SET "default" 0.0;
			target: "button-close";
		}
		program {
			signal: "mouse,down,*"; source: "e.event.maximize";
			action: STATE_SET "clicked" 0.0;
			target: "button-max";
		}
		program {
			signal: "mouse,up,*"; source: "e.event.maximize";
			action: STATE_SET "default" 0.0;
			target: "button-max";
		}
		//~ program {
			//~ signal: "mouse,down,*"; source: "e.event.minimize";
			//~ action: STATE_SET "selected" 0.0;
			//~ target: "button-min";
		//~ }
		program {
			signal: "mouse,up,*"; source: "e.event.minimize";
			action: STATE_SET "default" 0.0;
			target: "button-min";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.titlebar";
			action: SIGNAL_EMIT "elm,action,move,start" "elm";
		}
		program {
			signal: "mouse,up,1"; source: "e.event.titlebar";
			action: SIGNAL_EMIT "elm,action,move,stop" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.minimize";
			action: SIGNAL_EMIT "elm,action,minimize" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.maximize";
			action: SIGNAL_EMIT "elm,action,maximize" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "e.event.close";
			action: SIGNAL_EMIT "elm,action,close" "elm";
		}
		program {
         signal: "mouse,in"; source: "e.event.resize.t";
         action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.t";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.t";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.t";
		}
		program { name: "resize_t_down";
			signal: "mouse,down,1"; source: "e.event.resize.t";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.t";
		}
		program {
			signal: "mouse,in"; source: "e.event.resize.b";
			action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.b";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.b";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.b";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.resize.b";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.b";
		}
		program {
			signal: "mouse,in"; source: "e.event.resize.tl";
			action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.tl";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.tl";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.tl";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.resize.tl";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.tl";
		}
		program {
			signal: "mouse,in"; source: "e.event.resize.tr";
			action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.tr";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.tr";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.tr";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.resize.tr";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.tr";
		}
		program {
			signal: "mouse,in"; source: "e.event.resize.bl";
			action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.bl";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.bl";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.bl";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.resize.bl";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.bl";
		}
		program {
			signal: "mouse,in"; source: "e.event.resize.br";
			action: SIGNAL_EMIT "elm,action,resize,show" "elm.event.resize.br";
		}
		program {
			signal: "mouse,out"; source: "e.event.resize.br";
			action: SIGNAL_EMIT "elm,action,resize,hide" "elm.event.resize.br";
		}
		program {
			signal: "mouse,down,1"; source: "e.event.resize.br";
			action: SIGNAL_EMIT "elm,action,resize,start" "elm.event.resize.br";
		}
	}
}
#undef TOP
#undef LEFT
#undef RIGHT
#undef BOTTOM

group { name: "elm/ews/decoration/borderless";
   parts {
      part { name: "shadow"; mouse_events: 0;
          description { state: "default" 0.0;
            image.normal: "images/comp/comp-sh1.png";
            image.border: 35 35 35 35;
            image.middle: 0;
            rel1.offset: -35  -35;
            rel2.offset: 34 34;
            fill.smooth: 1;
            color: 0 0 0 255;
         }
         description { state: "hidden" 0.0;
			inherit: "default" 0.0;
			color: 0 0 0 0;
			visible: 0;
         }
      }
      part { name: "glow"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "images/win_glow.png";
            image.border: 9 9 9 9;
            image.middle: 0;
            rel1.offset: -5  -5;
            rel2.offset: 4 4;
            fill.smooth: 0;
            color: 255 255 255 0;
            visible: 0;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
            visible: 1;
         }
      }
      part { name: "focus"; type: RECT; repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      program {
         signal: "mouse,down,1"; source: "focus";
         action: SIGNAL_EMIT "elm,action,focus" "elm";
      }
      program {
         signal: "elm,state,focus,on"; source: "elm";
         action: STATE_SET "focused" 0.0;
         transition: SINUSOIDAL 0.1;
         target: "glow";
         target: "focus";
         after: "focus2";
      }
      program { name: "focus2";
         action: STATE_SET "default" 0.0;
         transition: SINUSOIDAL 0.4;
         target: "glow";
      }
      program {
         signal: "elm,state,focus,off"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: SINUSOIDAL 0.1;
         target: "focus";
         target: "glow";
      }
   }   
}

#undef ALTERNATE
#undef BORDER_SHADOW
#undef BORDER_GLOW
#undef BORDER_IMAGE
#undef BORDER_COLOR
#undef BORDER_COLOR_POST
#undef BORDER_BUT
#undef BORDER_BUTTONS
#undef BORDER_ICON
#undef BORDER_TITLE
#undef COLORIZE
#undef COLORIZE_ACTIVE
#undef COLORIZE_BUTTONS
#undef COLORIZE_ACTIVE_BUTTONS
#undef BORDER_EVENT_MAP
#undef BORDER_EVENT_MAP_RESIZE
#undef BORDER_CLIENT
#undef BORDER_BUSY
