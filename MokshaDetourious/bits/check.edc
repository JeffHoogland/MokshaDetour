
# ifdef CHECK
#  undef CHECK
# endif
#define CHECK()										\
	program {										\
		name: "focused";							\
		signal: "e,state,focused";					\
		source: "e";								\
		action: STATE_SET "visible" 0.0;			\
		transition: DECELERATE 0.5;					\
		target: "focus_clip";						\
	}												\
	program {										\
		name: "unfocused";							\
		signal: "e,state,unfocused";				\
		source: "e";								\
		action: STATE_SET "default" 0.0;			\
		transition: DECELERATE 0.5;					\
		target: "focus_clip";						\
	}												\
	program {										\
		name: "checked";							\
		signal: "e,state,checked";					\
		source: "e";								\
		action: STATE_SET "visible" 0.0;			\
		target: "checked";							\
	}												\
	program {										\
		name: "unchecked";							\
		signal: "e,state,unchecked";				\
		source: "e";								\
		action: STATE_SET "default" 0.0;			\
		target: "checked";							\
	}												\
	program {										\
		name: "action,toggle";						\
		signal: "mouse,down,1";						\
		source: "event";							\
		action: SIGNAL_EMIT "e,action,toggle" "";	\
		after: "mouse_out";							\
	}												\
	program {										\
		name: "enable";								\
		signal: "e,state,enabled";					\
		source: "e";								\
		action: STATE_SET "default" 0.0;			\
		target: "base";								\
		target: "unchecked";						\
		target: "shadow";							\
		target: "e.text.label";						\
		target: "event";							\
	}												\
	program {										\
		name: "disable";							\
		signal: "e,state,disabled";					\
		source: "e";								\
		action: STATE_SET "disabled" 0.0;			\
		target: "base";								\
		target: "unchecked";						\
		target: "shadow";							\
		target: "e.text.label";						\
		target: "event";							\
	}												\
	program {										\
		name: "mouse_in";							\
		signal: "mouse,in";							\
		source: "event";							\
		action: STATE_SET "visible" 0.0;			\
		transition: DECELERATE 0.25;				\
		target: "hover_clip";						\
	}												\
	program {										\
		name: "mouse_out";							\
		signal: "mouse,out";						\
		source: "event";							\
		action: STATE_SET "default" 0.0;			\
		transition: DECELERATE 0.25;				\
		target: "hover_clip";						\
	}
group {
	name: "e/widgets/check";
	/*
	 * Not to be confused with the MENU check widget (e/widgets/menu/default/check)
	 * which has a different behaviour.

	 * Detour's check widget button consists of 5 images:

	 * check_bt0.png [base]
	 * check_bt1.png [unchecked]
	 * check_bt2.png [checked]
	 * check_bt3.png [focus]
	 * check_bt4.png [shadow]
	 */
	parts {

		part {
			/*
			 * The base has two STATE(s). Enabled which is the default description.
			 * The image has a fixed size and width, and accept no mouse_events.
			 */
			name: "base";
			type: IMAGE;
			mouse_events: 0; /* accept no mouse_events */
			description {
				state: "default" 0.0;
				/* image dimensions: 20x18 and fixed */
				min: 20 18;
				max: 20 18;  
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 {
					relative: 0.0 0.0;
					offset: 2 2; /* +2px to the left +2px down */
				}		        
				rel2 {
					relative: 0.0 1.0;
					offset: 2 -3; /* +2px to the right raise 2px up */
				}		       
				image {
					normal: "images/check_bt0.png"; /* base */
				}
				color_class: "dialog_base";
			}
			/*
			 * Check widget = disabled
			 * [255 255 255 255 = full opacity]
			 * [255 255 255 128 = alpha blend the image 50%]
			 * Since the image does not change when the widget is disabled, inherit the
			 * default description.
			 */
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* alpha blend the image 50% when the state = disabled */
				color: 255 255 255 128;
			}
		}

		/* FIXME: Document this clip */

		part {
			name: "hover_clip";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 255 255 255 255;
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				/* color: 109 152 222 255; */
				color_class: "focus";
			}
		}
		/*
		 * "focus_clip" acts as a toggle between two STATE(s), or descriptions.
		 * any object cliped to "focus_clip" will inherit the active state of 
		 * this clip. With the default state as "selected", any object clipped
		 * to it, will not be visible. The only way for the object to be visible
		 * is for the clip to change to the "visible" state.
		 */

		part {
			name: "focus_clip";
			/* this clip is a rectangle 
			 * the only different between this and an image 
			 * is that a rectangle does not need to define an
			 * image, and opposed to an image the rectangle
			 * should define a color
			 */
			type: RECT;
			mouse_events: 0; /* accept no mouse_events */
			description {
				state: "default" 0.0;
				color: 255 255 255 0; /* not visible */
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255; /* visible */
			}
		}
		/*
		 * "focus" image will behaviour according to the "focus_clip" STATE(s) changes.
		 */

		part {
			name: "focus";
			type: IMAGE;
			mouse_events: 0;

			clip_to: "focus_clip"; /* clip this part to "focus_clip" */
			description {
				state: "default" 0.0;
				image.normal: "images/check_bt3.png";
				rel1 {
					to: "base";
					relative: 0.0 0.0;
					offset: 0 0;
				}
				rel2 {
					to: "base";
					relative: 1.0 1.0;
					offset: -1 -1;
				}
				color_class: "focus";
			}
		}
		/*

		 * The "shadow" part can be considered a [cosmetic]. Its only purpose is to
		 * give a (raised) look to the widget.
		 */

		part {
			name: "shadow";
			type: IMAGE;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 255 255 255 192; /* image with 50% alpha blend */
				image.normal: "images/check_bt4.png"; 	/* shadow */
				rel1 { 
					to: "checked";
					relative: 0.0 0.0; 
					offset: 1 -1; /* move 1px down one to the left*/
				}
				rel2 { 
					to: "checked";
					relative: 1.0 1.0; 
					offset: -2 -2; /* move 1px to the left 1px up*/
				}
			} 
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* hide the image when the widget is disabled */
				color: 255 255 255 0; 
			}
		}
		/*
		 * the switch off state image.
		 * check button image in off state
		 */

		part {
			name: "unchecked";
			type: IMAGE;
			mouse_events: 0; /* accept no mouse_events */
			clip_to: "hover_clip";
			description {
				state: "default" 0.0;
				/* image dimensions: 20x18 and fixed */
				min: 20 18;
				max: 20 18;  
				fixed: 1 1;
				/* align to the far left and center */
				align: 0.0 0.5;
				/* since no relative or offset is defined
				 * assume: relative: 0.0 0.0; offset: 0 0; for rel1 */
				rel1 {
					to: "base";
				}
				/* since no relative or offset is defined
				 * assume: relative: 1.0 1.0; offset: -1 -1; for rel2 */
				rel2 {
					to: "base";
				}
				image {
					normal: "images/check_bt1.png";
				}
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* alpha blend the image 50% when the state = disabled */
				color: 255 255 255 128;
			}
		}
		/*
		 * the switch on image state
		 * not visible by default, only when the widget is checked
		 */

		part {
			name: "checked";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "hover_clip";
			description {
				state: "default" 0.0; /* hidden */
				/* image dimensions: 20x18 and fixed */
				min: 20 18;
				max: 20 18;
				fixed: 1 1;
				/* align to the far left and center */
				align: 0.0 0.5;
				visible: 0; /* hide the image */
				rel1 {
					to: "base";
				}
				rel2 {
					to: "base";
				}
				image {
					normal: "images/check_bt2.png";
				}
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1; /* image becomes visible */
			}
		}
		/*
		 * the check widget label:

		 * detour text guidelines: 
		 * label_color: 60 60 60 255 [enabled state]
		 * label_color: 60 60 60 128 [disabled state]
		 * font_effects: none
		 * font_size: 11px 
		 */

		part {
			name: "e.text.label";
			type: TEXT;
			effect: TEXT_EFFECT;
			scale: 1;
			mouse_events: 0;
			description {
				state: "default" 0.0;

				rel1 {
					to_x: "base";
					relative: 1.0 0.0;
					offset: 5 2;
				}
				rel2 {
					relative: 1.0  1.0;
					offset: -5 -2;
				}
				TEXT_COLOR;
				TEXT_NORMAL("check_button", 0.0 0.5, 1 1);
				text.ellipsis: -1;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				TEXT_COLOR_DISABLED;
			}
		}
		/* mouse_events signal catcher */

		part {
			name: "event";
			type: RECT;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
	}
	programs {
		CHECK();
	}
}
group {
	name: "e/widgets/check_icon";
	parts {

		part {
			name: "base";
			type: IMAGE;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				min: 20 18;
				max: 20 18;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 { 
					relative: 0.0 0.0; 
					offset: 2 2; 
				}
				rel2 { 
					relative: 0.0 1.0; 
					offset: 2 -3; 
				}
				image {
					normal: "images/check_bt0.png";
				}
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* alpha blend the image 50% when the state = disabled */
				color: 255 255 255 128;
			}
		}
		/* FIXME: Document this clip */

		part {
			name: "hover_clip";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 255 255 255 255;
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				color: 109 152 222 255;
			}
		}
		/*
		 * "focus_clip" acts as a toggle between two STATE(s), or descriptions.
		 * any object cliped to "focus_clip" will inherit the active state of 
		 * this clip. With the default state as "selected", any object clipped
		 * to it, will not be visible. The only way for the object to be visible
		 * is for the clip to change to the "visible" state.
		 */

		part {
			name: "focus_clip";
			/* this clip is a rectangle 
			 * the only different between this and an image 
			 * is that a rectangle does not need to define an
			 * image, and opposed to an image the rectangle
			 * should define a color
			 */
			type: RECT;
			mouse_events: 0; /* accept no mouse_events */
			description {
				state: "default" 0.0;
				color: 255 255 255 0; /* not visible */
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255; /* visible */
			}
		}
		/*
		 * "focus" image will behaviour according to the "focus_clip" STATE(s) changes.
		 */

		part {
			name: "focus";
			type: IMAGE;
			mouse_events: 0;

			clip_to: "focus_clip"; /* clip this part to "focus_clip" */
			description {
				state: "default" 0.0;
				image.normal: "images/check_bt3.png";
				rel1 {
					to: "base";
					relative: 0.0 0.0;
					offset: 0 0;
				}
				rel2 {
					to: "base";
					relative: 1.0 1.0;
					offset: -1 -1;
				}
			}
		}
		/*

		 * The "shadow" part can be considered a [cosmetic]. Its only purpose is to
		 * give a (raised) look to the widget.
		 */

		part {
			name: "shadow";
			type: IMAGE;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 255 255 255 192; /* image with 50% alpha blend */
				image.normal: "images/check_bt4.png"; 	/* shadow */
				rel1 { 
					to: "checked";
					relative: 0.0 0.0; 
					offset: 1 -1; /* move 1px down one to the left*/
				}
				rel2 { 
					to: "checked";
					relative: 1.0 1.0; 
					offset: -2 -2; /* move 1px to the left 1px up*/
				}
			} 
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* hide the image when the widget is disabled */
				color: 255 255 255 0; 
			}
		}
		/*
		 * the switch off state image.
		 * check button image in off state
		 */

		part {
			name: "unchecked";
			type: IMAGE;
			mouse_events: 0; /* accept no mouse_events */
			clip_to: "hover_clip";
			description {
				state: "default" 0.0;
				/* image dimensions: 20x18 and fixed */
				min: 20 18;
				max: 20 18;  
				fixed: 1 1;
				/* align to the far left and center */
				align: 0.0 0.5;
				/* since no relative or offset is defined
				 * assume: relative: 0.0 0.0; offset: 0 0; for rel1 */
				rel1 {
					to: "base";
				}
				/* since no relative or offset is defined
				 * assume: relative: 1.0 1.0; offset: -1 -1; for rel2 */
				rel2 {
					to: "base";
				}
				image {
					normal: "images/check_bt1.png";
				}
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				/* alpha blend the image 50% when the state = disabled */
				color: 255 255 255 128;
			}
		}
		/*
		 * the switch on image state
		 * not visible by default, only when the widget is checked
		 */

		part {
			name: "checked";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "hover_clip";
			description {
				state: "default" 0.0; /* hidden */
				/* image dimensions: 20x18 and fixed */
				min: 20 18;
				max: 20 18;
				fixed: 1 1;
				/* align to the far left and center */
				align: 0.0 0.5;
				visible: 0; /* hide the image */
				rel1 {
					to: "base";
				}
				rel2 {
					to: "base";
				}
				image {
					normal: "images/check_bt2.png";
				}
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1; /* image becomes visible */
			}
		}

		part {
			name: "icon_clip";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				min: 16 16;
				color: 255 255 255 255; 
				rel1 { 
					to: "e.swallow.icon"; 
				}
				rel2 { 
					to: "e.swallow.icon"; 
				}
			}
			description {
				state: "disabled" 0.0;
				inherit:  "default" 0.0;
				color: 255 255 255 128;
			}
		}

		part {
			name:  "e.swallow.icon";
			type: SWALLOW;
			clip_to: "icon_clip";
			description {
				state: "default" 0.0;
				min: 16 16;
				rel1 { 
					to_x: "checked"; 
					relative: 1.0 0.0; 
					offset: 2 2; 
				}
				rel2 { 
					relative: 1.0 1.0; 
					offset: -2 -2; 
				} 
			}
			description {
				state: "label_visible" 0.0;
				min: 16 16;
				rel1 { 
					to_x: "checked"; 
					relative: 1.0 0.0; 
					offset: 2 2; 
				}
				rel2 { 
					to_y: "e.text.label"; 
					relative: 1.0 0.0; 
					offset: -2 -2; 
				}
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: TEXT_EFFECT;
			scale: 1;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				rel1 {
					to_x: "base";
					relative: 1.0 0.0;
					offset: 5 2;
				}
				rel2 {
					relative: 1.0  1.0;
					offset: -5 -2;
				}
				TEXT_COLOR;
				TEXT_NORMAL("check_button", 0.0 0.5, 1 1);
				text.ellipsis: -1;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				TEXT_COLOR_DISABLED;
			}
		}

		part {
			name: "event";
			type: RECT;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
	}
	programs {
		program {
			name: "focused";
			signal: "e,state,focused";
			source: "e";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "focus_clip";
		}
		program {
			name: "unfocused";
			signal: "e,state,unfocused";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "focus_clip";
		}
		program {
			name: "checked";
			signal: "e,state,checked";
			source: "e";
			action: STATE_SET "visible" 0.0;
			target: "checked";
		}
		program {
			name: "unchecked";
			signal: "e,state,unchecked";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "checked";
		}
		program {
			name: "action,toggle";
			signal: "mouse,down,1";
			source: "event";
			action: SIGNAL_EMIT "e,action,toggle" "";
			after: "mouse_out";
		}
		program {
			name: "enable";
			signal: "e,state,enabled";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "checked";
			target: "shadow";
			target: "icon_clip";
			target: "e.text.label";
			target: "event";
		}
		program {
			name: "disable";
			signal: "e,state,disabled";
			source: "e";
			action: STATE_SET "disabled" 0.0;
			target: "base";
			//~ target: "checked";
			target: "shadow";
			target: "icon_clip";
			target: "e.text.label";
			target: "event";
		}
		program { 
			name: "labeled";
			signal: "e,state,labeled";
			source: "e";
			action: STATE_SET "label_visible" 0.0;
			target: "e.swallow.icon";
		}
		program {
			name: "mouse_in";
			signal: "mouse,in";
			source: "event";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.25;
			target: "hover_clip";
		}
		program {
			name: "mouse_out";
			signal: "mouse,out";
			source: "event";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.25;
			target: "hover_clip";
		}
	}
}
